@page "/"
@inject WebFormatterState State

<div class="whole-sandbox">
    <div class="settings-sidebar">
        <SettingsPanel/>
    </div>

    <div class="input-output-area">
        <div>
            <div><label for="jsonInput">JSON Input:</label></div>
            <textarea class="json-box" @bind="State.InputJson"
                autofocus rows="15" cols="100" id="jsonInput" spellcheck="false" @ref="_inputBoxRef"
                placeholder="Paste your favorite JSON data here">
            </textarea>
        </div>
        <button type="button" class="fmt-btn" @onclick="State.DoFormat">Format</button>
        <button type="button" class="fmt-btn" @onclick="State.DoMinify">Minify</button>
        <button type="button" class="sample-btn" @onclick="SetSamplePureJson">Sample Data (no comments)</button>
        <button type="button" class="sample-btn" @onclick="SetSampleWithComments">Sample Data (with comments)</button>
        <div>
            <div><label for="jsonOutput">Formatted Output:</label></div>
            <textarea class="json-box" @bind="State.OutputJson"
                rows="15" cols="100" id="jsonOutput" spellcheck="false"
                placeholder="Formatted JSON will appear here">
            </textarea>
        </div>
    </div>
</div>



@code {
    protected override void OnInitialized()
    {
        State.RestoreOptionsFromLocalStorage();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            await _inputBoxRef.FocusAsync();
    }

    private void SetSamplePureJson()
    {
        State.InputJson = _samplePureJson.Replace('\'', '"');
        State.OutputJson = string.Empty;
    }

    private void SetSampleWithComments()
    {
        State.InputJson = string.Join(Environment.NewLine, _sampleJsonWithComments).Replace('\'', '"');
        State.OutputJson = string.Empty;
    }

    private ElementReference _inputBoxRef;

    // Sample JSON.  I've replaced quotes with apostrophes to avoid escapes which make it hard to read.
    private const string _samplePureJson = "{'SimpleArray':[2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113],'ObjectColumnsArrayRows':{'Katherine':['blue','lightblue','black'],'Logan':['yellow','blue','black','red'],'Erik':['red','purple'],'Jean':['lightgreen','yellow','black']},'ArrayColumnsObjectRows':[{'type':'turret','hp':400,'loc':{'x':47,'y':-4},'flags':'S'},{'type':'assassin','hp':80,'loc':{'x':12,'y':6},'flags':'Q'},{'type':'berserker','hp':150,'loc':{'x':0,'y':0}},{'type':'pittrap','loc':{'x':10,'y':-14},'flags':'S,I'}],'ComplexArray':[[19,2],[3,8],[14,0],[9,9],[9,9],[0,3],[10,1],[9,1],[9,2],[6,13],[18,5],[4,11],[12,2]]}";

    private readonly string[] _sampleJsonWithComments = new string[]
    {
        "{",
        "/*",
        " * Multi-line comments",
        " * are fun!",
        " */",
        "'NumbersWithHex':[254/*00FE*/,1450/*5AA*/,0/*0000*/,36000/*8CA0*/,10/*000A*/,199/*00C7*/,15001/*3A99*/,6540/*198C*/]",
        "/* Elements are keen */",
        ",'Elements':[{/*Carbon*/'Symbol':'C','Number':6,'Isotopes':[11,12,13,14]},{/*Oxygen*/'Symbol':'O','Number':8,'Isotopes':[16,18,17]},{/*Hydrogen*/'Symbol':'H','Number':1,'Isotopes':[1,2,3]},{/*Iron*/'Symbol':'Fe','Number':26,'Isotopes':[56,54,57,58]}",
        "// Not a complete list...",
        "]",
        "",
        ",'Beatles Songs':['Taxman'// George",
        ",'Hey Jude'// Paul",
        ",'Act Naturally'// Ringo",
        ",'Ticket To Ride'// John",
        "]}",
    };

}
